// Update these vars
var tpTitle = "Marketing Sources"
var jsonSourcePath = "../src/analytics-autogenerated/plan.json"
var markdownTargetPath = "./docs/tp1.md"

// run `node render-tp.js` in your terminal so this script can do the rest!
const fs = require('fs');
// const json = require('./tp-json/android-core.json');
const json = require(jsonSourcePath);

/// CHANGE 1 - rename .data.trackingPlan. to .rules. ///
// const trackEvents = json.data.trackingPlan.rules;
const trackEvents = json.rules.events;

let formattedEvents = [];
let header = tpTitle + '\n';
formattedEvents.push(header);
for (let event of trackEvents) {
    formattedEvent = [];
    // HTML alignment
    // formattedEvent.push('<!-- panels:start -->' + '\n');
    // formattedEvent.push('<!-- div:left-panel -->' + '\n');
    // Format event content
    formattedEvent.push('\n');

// CHANGE 2 - rename event.key to event.name //
    // formattedEvent.push('### ' + event.key + '\n');
    formattedEvent.push('### ' + event.name + '\n');

// CHANGE 3 - replace .jsonSchema. with .rules. //
    // eventData = event.jsonSchema.properties;
    eventData = event.rules.properties;


    // formattedEvent.push('<!-- div:right-panel -->' + '\n');

    formattedEvent.push('<!-- tabs:start -->');
    formattedEvent.push('#### **Basics**' + '\n');
    formattedEvent.push('Fires when...' );
   formattedEvent.push('#### **Properties**' + '\n');
    formattedEvent.push('|**Name** | `Type` | Description | Required?|');
    formattedEvent.push('| :--- | :--- | :--- | :---|' );
    for (let propName in eventData.properties.properties) {
            let propData = eventData.properties;
            let propType = propData.properties[propName].type;
            formattedEvent.push('|**' + propName  + '** | `' + propType + '` |...|Required/Optional|' )
    //         // let required = (eventData.hasOwnProperty('required')) ? eventData.required.includes(propName) : false;
        }

        formattedEvent.push('#### **JS**'+ '\n');
        // formattedEvent.push('## JavaScript');
        formattedEvent.push('```javascript');

// CHANGE 4 - rename event.key to event.name //
        // formattedEvent.push('analytics.track("'+ event.key +'" {')
        formattedEvent.push('analytics.track("'+ event.name +'" {')

        for (let propName in eventData.properties.properties) {
                let propData = eventData.properties;
                let propType = propData.properties[propName].type;
                formattedEvent.push('"' + propName  + '": "<<' + propType + '>>"' )
            }
        formattedEvent.push('});')
        formattedEvent.push('```' + ' \n')
        formattedEvent.push('<!-- tabs:end -->' + '\n');
        formattedEvent.push('<!-- panels:end -->' + '\n');

    //     // HTML Alignment
    //     formattedEvent.push('\n' + '<!-- div:right-panel -->' + '\n');
    //     formattedEvent.push('Code Samples');
    //     formattedEvent.push('<!-- tabs:start -->');
    //     formattedEvent.push('#### **Javascript**');
    //     formattedEvent.push('````Javascript\nanalytics.track("' + event.key + '");\n````');
    //     formattedEvent.push('#### **iOS**');
    //     formattedEvent.push('iOS code here');
    //     formattedEvent.push('#### **Android**');
    //     formattedEvent.push('Android code here');
    //     formattedEvent.push('\n' + '<!-- tabs:end -->' + '\n');
    //     formattedEvent.push('<!-- panels:end -->' + '\n');
    //     // Merge with rest of events
        formattedEvents.push.apply(formattedEvents, formattedEvent);
        console.log(formattedEvents);
    }
    // Convert array into newline-delimited string
   let eventsMarkdown = formattedEvents.join('\n');
   fs.writeFileSync(markdownTargetPath, eventsMarkdown, 'utf-8');
// fs.writeFileSync('./docs/events2.md', formattedEvents, 'utf-8');


    //let contentMarkdown = fs.readFileSync('./docs/content.md', 'utf-8');
    //let md = contentMarkdown.replace('# Track events (Protocols JSON Render)', eventsMarkdown);
    //fs.writeFileSync('./docs/content.md', md, 'utf-8');
